from sqlalchemy import create_engine, MetaData, Table
from sqlalchemy.exc import SQLAlchemyError

# 1Ô∏è‚É£ –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º
sqlite_url = "sqlite:///instance/onboarding.db"  # –ª–æ–∫–∞–ª—å–Ω—ã–π SQLite
postgres_url = "postgresql://onboarding_crm_db_user:AAqgiBr6bVfD7CaN3QqWTGE83CT3WiVO@dpg-d2521t2dbo4c73a7v1gg-a/onboarding_crm_db"  # Render Postgres

# 2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥–≤–∏–∂–∫–∏
sqlite_engine = create_engine(sqlite_url)
pg_engine = create_engine(postgres_url)

sqlite_metadata = MetaData()
sqlite_metadata.reflect(bind=sqlite_engine)

# 3Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –≤ Postgres, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
for table_name, table in sqlite_metadata.tables.items():
    try:
        print(f"üõ† –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É {table_name} –≤ Postgres (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
        table_pg = Table(table_name, MetaData())
        for c in table.columns:
            table_pg.append_column(c.copy())
        table_pg.create(bind=pg_engine, checkfirst=True)
    except SQLAlchemyError as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")

# 4Ô∏è‚É£ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
sqlite_conn = sqlite_engine.connect()
pg_conn = pg_engine.connect()

for table_name in sqlite_metadata.tables:
    try:
        rows = sqlite_conn.execute(f"SELECT * FROM {table_name}").fetchall()
        if rows:
            columns = sqlite_metadata.tables[table_name].columns.keys()
            placeholders = ",".join([f"%s" for _ in columns])
            insert_query = f'INSERT INTO {table_name} ({",".join(columns)}) VALUES ({placeholders})'
            for row in rows:
                pg_conn.execute(insert_query, tuple(row))
            print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ {table_name}")
        else:
            print(f"‚Ñπ –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é")
    except SQLAlchemyError as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {table_name}: {e}")

pg_conn.commit()
sqlite_conn.close()
pg_conn.close()

print("üéâ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")